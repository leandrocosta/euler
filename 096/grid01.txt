 0 0 3 0 2 0 6 0 0 : 6
 9 0 0 3 0 5 0 0 1 : 5
 0 0 1 8 0 6 4 0 0 : 5
 0 0 8 1 0 2 9 0 0 : 5
 7 0 0 0 0 0 0 0 8 : 7
 0 0 6 7 0 8 2 0 0 : 5
 0 0 2 6 0 9 5 0 0 : 5
 8 0 0 2 0 3 0 0 9 : 5
 0 0 5 0 1 0 3 0 0 : 6

 2 2           2 2  : 4
   8     8   8 8    : 4
 1 1       1 1 1    : 5 
 3 3     3     3 3  : 5
 6 6     6     6 6  : 5
   9 9 9 9     9    : 5
 5 5   5 5     5 5  : 6
   7 7   7 7 7 7 7  : 7
 4 4 4 4 4 4   4 4  : 8
 -----------------
 6 9 3 3 7 3 3 9 6 = 49

BEGIN main
	m = matrix of sudoku

	absentx = array where absentx(x) = set of all absent numbers from line x
	absenty = array where absenty(y) = set of all absent numbers from column y

	possiblexy = matrix where possiblexy(x,y) = intersection between absentx(x) and absenty(y)

	find_solution(m, possiblexy)
END

BEGIN find_solution(m, possiblexy)
	WHILE there is possiblexy(x1,y1) of size 1:
		m[x1,y1] = possiblexy(x1,y1)
		remove m[x1,y1] from all possiblexy(x,y) where x = x1 or y = y1

	IF we have a solution
		print solution
		exit
	ELSE IF we still have possiblexy(x,y) > 0
		// now we have to try

		get x1,y1 where size of possiblexy(x1,y1) is the smallest > 0

		FOR EACH value FROM possiblexy(x1,y1):
			// try it:
			new_m = m
			new_possiblexy = possiblexy

			new_m[x1,y1] = new_possiblexy(x1,y1)
			remove new_m[x1,y1] from all new_possiblexy(x,y) where x = x1 or y = y1
			find_solution(new_m, new_possiblexy)
	END IF
END
