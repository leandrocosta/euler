 0 0 3 0 2 0 6 0 0 : 6
 9 0 0 3 0 5 0 0 1 : 5
 0 0 1 8 0 6 4 0 0 : 5
 0 0 8 1 0 2 9 0 0 : 5
 7 0 0 0 0 0 0 0 8 : 7
 0 0 6 7 0 8 2 0 0 : 5
 0 0 2 6 0 9 5 0 0 : 5
 8 0 0 2 0 3 0 0 9 : 5
 0 0 5 0 1 0 3 0 0 : 6

 2 2           2 2  : 4
   8     8   8 8    : 4
 1 1       1 1 1    : 5 
 3 3     3     3 3  : 5
 6 6     6     6 6  : 5
   9 9 9 9     9    : 5
 5 5   5 5     5 5  : 6
   7 7   7 7 7 7 7  : 7
 4 4 4 4 4 4   4 4  : 8
 -----------------
 6 9 3 3 7 3 3 9 6 = 49

function from i,j to x:
3*(i/3) + (j/3)%3

function from x to i0,j0:
i = 3*(x/3), j = 3*(x%3)

BEGIN SolveSudoku
	INPUT: a sudoku 9x9 matrix M
	OUTPUT: a solved sudoku 9x9 matrix S
		    NULL if the solution doesn't exist

	MAVAILABLE <= empty 9x9 matrix
	LABSENT <= array where LABSENT[i] = set of all absent numbers of line i
	CABSENT <= array where CABSENT[j] = set of all absent numbers of column j
	BABSENT <= array where BABSENT[x] = set of all absent numbers of box x

	FOR each empty position (i,j) of M
		MAVAILABLE(i,j) = intersection between LABSENT(i) and CABSENT(j) and BABSENT(x) // x = 3 * i/3 + (j/3)%3

	RETURN getSolution(M, MAVAILABLE)
END

BEGIN getSolution
	INPUT: a sudoku 9x9 matrix M
		   a 9x9 matrix MAVAILABLE with all available numbers for each empty position of M

	WHILE there is x,y such that MAVAILABLE(x,y) has size 1:
		M(x,y) = MAVAILABLE(x,y)
		MAVAILABLE(i,j) -= {M(x,y)} if i=x or j=y
	
	IF (M is not valid)
		RETURN NULL
	ELSE IF (M is a solution)
		RETURN M
	ELSE
		x,y = i,j from which MAVAIABLE(i,j) has the smallest set > 0

		FOR EACH n FROM MAVAILABLE(x,y) DO
			NEW_M = M
			NEW_MAVAILABLE = MAVAILABLE

			NEW_M(x,y) = n
			NEW_MAVAILABLE(i,j) -= {N} if i=x or j=y
			return getSolution(NEW_M, NEW_MAVAILABLE)
		END FOR
	END IF
END
